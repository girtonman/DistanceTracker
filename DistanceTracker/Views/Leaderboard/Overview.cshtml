@using DistanceTracker.Models
@using Newtonsoft.Json
@model OverviewLeaderboardViewModel

@{
	ViewData["Title"] = "Home Page";
}

<script>
	jQuery(function () {
		setupWinnersCircle();
	});

	async function setupWinnersCircle() {
		var ctx = document.getElementById('winnersCircle').getContext('2d');

		var winnersCircle = new Chart(ctx, {
			type: 'pie',
			data: {
				labels: [],
				datasets: [{
					data: [],
					backgroundColor: [
						'#f1c40f',
						'#e67e22',
						'#e74c3c',
						'#34495e',
						'#1abc9c',
						'#2ecc71',
						'#3498db',
						'#9b59b6',
						'#ecf0f1',
						'#95a5a6',
						'#f39c12',
						'#d35400',
						'#c0392b',
						'#2c3e50',
						'#16a085',
						'#27ae60',
						'#2980b9',
						'#bdc3c7',
						'#7f8c8d',
					],
				}]
			},
			options: {
				responsive: true,
				plugins: {
					legend: {
						position: 'top',
					},
					title: {
						display: true,
						text: 'Winners Circle',
						font: {
							size: 30
						}
					},
				}
			}
		});

		var winnersCircleData = @Html.Raw(JsonConvert.SerializeObject(Model.WinnersCircle));

		for (var i = 0; i < winnersCircleData.length; i++) {
			var slice = winnersCircleData[i];
			addData(winnersCircle, slice.Name, slice.Count);
			await new Promise(r => setTimeout(r, 100));
		}
	};

	function addData(chart, name, count) {
		chart.data.labels.push(name);
		chart.data.datasets[0].data.push(count);
		chart.update();
	};
</script>

<div class="container text-center" style="max-width: 1800px">
	<div class="row">
		<div class="col-12 col-xl-3"></div>
		@if (Model.HasTimeScores)
		{
		<div class="col-6 col-xl">
			<h5>Optimal Total Time</h5>
			<h2 style="margin-bottom: 1px; margin-top: -6px;">@Formatter.TimeFromMs(Model.OptimalTotalTime)</h2>
		</div>
		}
		@if (Model.HasStuntScores)
		{
		<div class="col-6 col-xl">
			<h5>Optimal Total Stunt Score</h5>
			<h2 style="margin-bottom: 1px; margin-top: -6px;">@Formatter.ElectronVolts(Model.OptimalTotalStuntScore)</h2>
		</div>
		}
		<div class="col-12 col-xl-3"></div>
	</div>

	<hr />

	<div class="row">
		<div class="col-12 col-xl-7">
			<h4 class="text-left">@Model.LeaderboardName</h4>
			<table class="table table-striped table-dark">
				<thead>
					<tr>
						<th class="text-left">Rank</th>
						<th class="text-left">Player</th>
						@Html.Raw(Model.HasTimeScores ? "<th>Total Time</th>" : "")
						@Html.Raw(Model.HasStuntScores ? "<th>Total Score</th>" : "")
						<th># Tracks Completed</th>
						<th>Points</th>
						<th>Rating</th>
					</tr>
				</thead>
				<tbody>
					@foreach(var entry in Model.LeaderboardEntries)
					{
						<tr>
							<td class="text-left">@entry.Rank</td>
							<td class="text-left"><a class="link" href="/Player?steamID=@entry.Player.SteamID">@entry.Player.Name</a></td>
							@if (Model.HasTimeScores)
							{
							<td>
								@Formatter.TimeFromMs(entry.TotalMilliseconds)
								@if(entry.LastWeeksTimeImprovement > 0)
								{
									@Html.Raw($"( <i class=\"fas fa-arrow-up fa-sm text-success\"></i> {Formatter.TimeFromMs(entry.LastWeeksTimeImprovement)} )")
								}
							</td>
							}
							@if (Model.HasStuntScores)
							{
							<td>
								@Formatter.ElectronVolts(entry.TotalStuntScore)
								@if(entry.LastWeeksScoreImprovement > 0)
								{
									@Html.Raw($"( <i class=\"fas fa-arrow-up fa-sm text-success\"></i> {Formatter.ElectronVolts(entry.LastWeeksScoreImprovement)} )")
								}
							</td>
							}
							<td>@entry.NumTracksCompleted</td>
							<td>@entry.NoodlePoints.ToString("0")</td>
							<td>@entry.PlayerRating.ToString("0.00")</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<div class="col-12 col-xl-5">
			<canvas id="winnersCircle" style="margin-bottom: 15px;margin-top: 15px;"></canvas>
			<h4 class="text-left"># First Place Records</h4>
			<table class="table table-striped table-dark">
				<thead>
					<tr>
						<th class="text-left">Player</th>
						<th>Count</th>
					</tr>
				</thead>
				<tbody>
					@foreach(var player in Model.WinnersCircle)
					{
						<tr>
							<td class="text-left">@player.Name</td>
							<td>@player.Count</td>
						</tr>
					}
				</tbody>
			</table>

			<h4 class="text-left">World Record Log</h4>
			<table class="table table-striped table-dark">
				<thead>
					<tr>
						<th class="text-left">Player</th>
						<th class="text-left">Track</th>
						@Html.Raw(Model.HasTimeScores ? Model.HasStuntScores ? "<th>Time/Score</th>" : "<th>Time</th>" : "<th>Score</th>")
						<th>When</th>
					</tr>
				</thead>
				<tbody>
					@foreach(var entry in Model.WRLog)
					{
						<tr>
							<td class="text-left entry-img no-wrap"><div class="fade-in">
								<img src="@(Html.Raw(entry.Player.SteamAvatar))" />
								<a class="link" href="/Player?steamID=@entry.Player.SteamID">
									@entry.Player.Name
								</a>
							</div></td>
							<td class="text-left entry-img no-wrap"><div class="fade-in">
								<img src="@(Html.Raw(entry.Leaderboard.ImageURL))" />
								<a class="link" href="/Leaderboard/Level?leaderboardID=@entry.Leaderboard.ID">
									@entry.Leaderboard.LevelName
								</a>
							</div></td>
							<td class="no-wrap">
								<div class="fade-in">
									@entry.MillisecondsString
									( <i class="fas fa-arrow-up fa-sm text-success"></i> @entry.TimeImprovement)
								</div>
							</td>
							<td class="no-wrap">
								<div class="fade-in">@entry.TimeAgoString</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
</div>
