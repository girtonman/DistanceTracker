@using DistanceTracker.Models
@using Newtonsoft.Json;
@using DistanceTracker.DALs;
@model OverviewLeaderboardViewModel
@inject PlayerDAL playerDAL;
@inject SteamDAL steamDAL;

@{
	ViewData["Title"] = Model.EventDetails.Name;
}

<script>
	var lastUpdateTimeUTC = null;

	jQuery(function () {
		setupWinnersCircle();
		getGlobalRecentActivity();
		
		$('#pills-tab a').on('click', function (e) {
			e.preventDefault()
			$(this).tab('show')
		});
	});

	function getGlobalRecentActivity() {
		$.ajax({
			url: '/Event/GetRecentEventActivity',
			method: 'GET',
			data: {after: lastUpdateTimeUTC, eventID: @Model.EventDetails.ID},
			success: async function (data) {
				// setup
				$('#recentActivityPlaceholder').hide();
				var recentActivity = $('#recentActivity');

				// handle the response
				for (var i = 0; i < data.length; i++) {
					var activity = data[i];
					if (activity.sighting != null) {
						var row = $(`
							<tr>
								<td class="text-left entry-img no-wrap"><div class="fade-in">
									<img src="${activity.sighting.player.steamAvatar}" />
									<a class="link" href="/Player?steamID=${activity.sighting.player.steamID}">
										${activity.sighting.player.name}
									</a>
								</div></td>
								<td class="text-left entry-img no-wrap"><div class="fade-in">
									<img src="${activity.sighting.leaderboard.imageURL}" />
									<a class="link" href="/Leaderboard/Level?leaderboardID=${activity.sighting.leaderboard.id}">
										${activity.sighting.leaderboard.levelName}
									</a>
								</div></td>
								<td class="no-wrap"><div class="fade-in">${/*TODO*/''}</div></td>
								<td class="no-wrap"><div class="fade-in">${activity.sighting.millisecondsString} <span class="text-success">New!</span></div></td>
								<td class="no-wrap"><div class="fade-in livestamp" data-livestamp="${activity.timeUTC / 1000}"></div></td>
							</tr>
						`);
					}
					else {
						var row = $(`
							<tr>
								<td class="text-left entry-img no-wrap"><div class="fade-in">
									<img src="${activity.improvement.player.steamAvatar}" />
									<a class="link" href="/Player?steamID=${activity.improvement.player.steamID}">
										${activity.improvement.player.name}
									</a>
								</div></td>
								<td class="text-left entry-img no-wrap"><div class="fade-in">
									<img src="${activity.improvement.leaderboard.imageURL}" />
									<a class="link" href="/Leaderboard/Level?leaderboardID=${activity.improvement.leaderboard.id}">
										${activity.improvement.leaderboard.levelName}
									</a>
								</div></td>
								<td class="no-wrap"><div class="fade-in">
									${activity.improvement.newRank}
									( <i class="fas fa-arrow-up fa-sm text-success"></i> ${activity.improvement.oldRank - activity.improvement.newRank} )</div></td>
								<td class="no-wrap"><div class="fade-in">
									${activity.improvement.millisecondsString}
									( <i class="fas fa-arrow-up fa-sm text-success"></i> ${activity.improvement.timeImprovement} )</div></td>
								<td class="no-wrap"><div class="fade-in livestamp" data-livestamp="${activity.timeUTC / 1000}"></div></td>
							</tr>
						`);
					}

					if (lastUpdateTimeUTC == null) {
						// add the new rows like it's a new page (top to bottom)
						recentActivity.append(row);
					}
					else {
						// add the new entries from the live update loop and remove an equal amount from the end
						recentActivity.prepend(row);
						recentActivity.children().last().remove();
					}
					await new Promise(r => setTimeout(r, 15));
				}
				
				// remember what the most recent time was for subsequent calls
				if (data.length > 0) {
					lastUpdateTimeUTC = data[0].timeUTC;
					
					$('.livestamp').on('change.livestamp', function(event, from, to) {
						event.preventDefault(); // Stop the text from changing automatically
						$(this).fadeOut(function() {
							$(this).html(to).fadeIn();
						});
					});
				}
			},
			error: function () {
				toastr.error('Failed to load event activity');
			},
			complete: function () {
				setTimeout(getGlobalRecentActivity, 10000);
			}
		});
	};

	async function setupWinnersCircle() {
		var ctx = document.getElementById('winnersCircle').getContext('2d');

		var winnersCircle = new Chart(ctx, {
			type: 'pie',
			data: {
				labels: [],
				datasets: [{
					data: [],
					backgroundColor: [
						'#f1c40f',
						'#e67e22',
						'#e74c3c',
						'#34495e',
						'#1abc9c',
						'#2ecc71',
						'#3498db',
						'#9b59b6',
						'#ecf0f1',
						'#95a5a6',
						'#f39c12',
						'#d35400',
						'#c0392b',
						'#2c3e50',
						'#16a085',
						'#27ae60',
						'#2980b9',
						'#bdc3c7',
						'#7f8c8d',
					],
				}]
			},
			options: {
				responsive: true,
				plugins: {
					legend: {
						position: 'top',
					},
					title: {
						display: true,
						text: 'Winners Circle',
						font: {
							size: 30
						}
					},
				}
			}
		});

		var winnersCircleData = @Html.Raw(JsonConvert.SerializeObject(Model.WinnersCircle));

		for (var i = 0; i < winnersCircleData.length; i++) {
			var slice = winnersCircleData[i];
			addData(winnersCircle, slice.Name, slice.Count);
			await new Promise(r => setTimeout(r, 100));
		}
	};

	function addData(chart, name, count) {
		chart.data.labels.push(name);
		chart.data.datasets[0].data.push(count);
		chart.update();
	};
</script>

<style>
	body {
		background-image: url("@(Model.EventDetails.EventBackgroundImageURL)");
	}

	.event-tab-button
	{
		font-size: 24px;
	}
</style>

<div class="text-center fade-in container" style="max-width 1800px">
	<div class="row">
		<div class="col-12">
			<h1 class="display-4 stroke">@Model.EventDetails.Name</h1>
		</div>
		<div class="col-4">
			<h5 class="stroke">1st Place</h5>
			@if(Model.FirstPlace != null)
			{
			<h2 class="stroke"><img src="@await Model.FirstPlace.GetSteamAvatar(steamDAL, playerDAL, "_medium")" /> @Model.FirstPlace.Name</h2>
			}
		</div>
		<div class="col-4">
			<h5 class="stroke">2nd Place</h5>
			@if(Model.SecondPlace != null)
			{
			<h2 class="stroke"><img src="@await Model.SecondPlace.GetSteamAvatar(steamDAL, playerDAL, "_medium")" /> @Model.SecondPlace.Name</h2>
			}
		</div>
		<div class="col-4">
			<h5 class="stroke">3rd Place</h5>
			@if(Model.ThirdPlace != null)
			{
			<h2 class="stroke"><img src="@await Model.ThirdPlace.GetSteamAvatar(steamDAL, playerDAL, "_medium")" /> @Model.ThirdPlace.Name</h2>
			}
		</div>
		<div class="col-12 col-xl-3"></div>
		@if (Model.HasTimeScores)
		{
		<div class="col-6 col-xl">
			<h5>Optimal Total Time</h5>
			<h2 style="margin-bottom: 1px; margin-top: -6px;">@Formatter.TimeFromMs(Model.OptimalTotalTime)</h2>
		</div>
		}
		@if (Model.HasStuntScores)
		{
		<div class="col-6 col-xl">
			<h5>Optimal Total Stunt Score</h5>
			<h2 style="margin-bottom: 1px; margin-top: -6px;">@Formatter.ElectronVolts(Model.OptimalTotalStuntScore)</h2>
		</div>
		}
		<div class="col-12 col-xl-3"></div>
	</div>

	<hr />

	<div class="row">
		<div class="col-12 col-xl-7">
			<ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
				<li class="nav-item">
					<a class="nav-link active stroke event-tab-button" id="pills-home-tab" data-toggle="pill" href="#pills-leaderboard" role="tab">Event Leaderboard</a>
				</li>
				<li class="nav-item">
					<a class="nav-link stroke event-tab-button" id="pills-profile-tab" data-toggle="pill" href="#pills-activity" role="tab">Event Activity</a>
				</li>
			</ul>
			<div class="tab-content" id="pills-tabContent">
				<div class="tab-pane fade show active" id="pills-leaderboard" role="tabpanel">
					<table class="table table-striped table-dark">
						<thead>
							<tr>
								<th class="text-left">Rank</th>
								<th class="text-left">Player</th>
								@Html.Raw(Model.HasTimeScores ? "<th>Total Time</th>" : "")
								@Html.Raw(Model.HasStuntScores ? "<th>Total Score</th>" : "")
								<th># Tracks Completed</th>
								<th>Points</th>
								<th>Rating</th>
							</tr>
						</thead>
						<tbody>
							@foreach(var entry in Model.LeaderboardEntries)
							{
								<tr>
									<td class="text-left">@entry.Rank</td>
									<td class="text-left"><a class="link" href="/Player?steamID=@entry.Player.SteamID">@entry.Player.Name</a></td>
									@if (Model.HasTimeScores)
									{
									<td>
										@Formatter.TimeFromMs(entry.TotalMilliseconds)
										@if(entry.LastWeeksTimeImprovement > 0)
										{
											@Html.Raw($"( <i class=\"fas fa-arrow-up fa-sm text-success\"></i> {Formatter.TimeFromMs(entry.LastWeeksTimeImprovement)} )")
										}
									</td>
									}
									@if (Model.HasStuntScores)
									{
									<td>
										@Formatter.TimeFromMs(entry.TotalStuntScore)
										@if(entry.LastWeeksScoreImprovement > 0)
										{
											@Html.Raw($"( <i class=\"fas fa-arrow-up fa-sm text-success\"></i> {Formatter.ElectronVolts(entry.LastWeeksScoreImprovement)} )")
										}
									</td>
									}
									<td>@entry.NumTracksCompleted</td>
									<td>@entry.NoodlePoints.ToString("0")</td>
									<td>@entry.PlayerRating.ToString("0.00")</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
				<div class="tab-pane fade" id="pills-activity" role="tabpanel">
					<table class="table table-striped table-dark" style="table-layout: fixed">
						<thead>
							<tr>
								<th class="text-left">Player</th>
								<th class="text-left">Track</th>
								<th class="text-left" style="width: 200px">Rank</th>
								<th class="text-left" style="width: 200px">Time</th>
								<th class="text-left" style="width: 200px">When</th>
							</tr>
						</thead>
						<tbody id="recentActivity">
						</tbody>
					</table>
					<div id="recentActivityPlaceholder" class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
				</div>
			</div>
		</div>
		<div class="col-12 col-xl-5">
			<canvas id="winnersCircle" style="margin-bottom: 15px;margin-top: 15px;"></canvas>
			<h4 class="text-left"># First Place Records</h4>
			<table class="table table-striped table-dark">
				<thead>
					<tr>
						<th class="text-left">Player</th>
						<th>Count</th>
					</tr>
				</thead>
				<tbody>
					@foreach(var player in Model.WinnersCircle)
					{
						<tr>
							<td class="text-left">@player.Name</td>
							<td>@player.Count</td>
						</tr>
					}
				</tbody>
			</table>

			<h4 class="text-left">World Record Log</h4>
			<table class="table table-striped table-dark">
				<thead>
					<tr>
						<th class="text-left">Player</th>
						<th class="text-left">Track</th>
						@Html.Raw(Model.HasTimeScores ? (Model.HasStuntScores ? "<th>Time/Score</th>" : "<th>Time</th>") : "<th>Score</th>")
						<th>When</th>
					</tr>
				</thead>
				<tbody>
					@foreach(var entry in Model.WRLog)
					{
						<tr>
							<td class="text-left entry-img no-wrap"><div class="fade-in">
								<img src="@(Html.Raw(entry.Player.SteamAvatar))" />
								<a class="link" href="/Player?steamID=@entry.Player.SteamID">
									@entry.Player.Name
								</a>
							</div></td>
							<td class="text-left entry-img no-wrap"><div class="fade-in">
								<img src="@(Html.Raw(entry.Leaderboard.ImageURL))" />
								<a class="link" href="/Leaderboard/Level?leaderboardID=@entry.Leaderboard.ID">
									@entry.Leaderboard.LevelName
								</a>
							</div></td>
							<td class="no-wrap">
								<div class="fade-in">
									@entry.MillisecondsString
									( <i class="fas fa-arrow-up fa-sm text-success"></i> @entry.TimeImprovement)
								</div>
							</td>
							<td class="no-wrap">
								<div class="fade-in">@entry.TimeAgoString</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
</div>
