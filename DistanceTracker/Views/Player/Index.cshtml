@using DistanceTracker.DALs;
@inject PlayerDAL playerDAL;
@inject SteamDAL steamDAL;
@model Player

@{
	ViewData["Title"] = $"Player: {Model.Name}";
}
@section metatags
{
	@*<meta property="og:title" content="test"/>
	<meta property="og:type" content="test"/>
	<meta property="og:image" content="test"/>
	<meta property="og:url" content="test"/>
	<meta property="og:description" content="test"/>
	<meta property="theme-color" content="#222"/>*@
}

<style>
	.card-img-top {
		background-color: #2c3034;
	}

	.level-card .card {
		background-color: #212529;
	}

	#backgroundVideo {
		position: fixed;
		@* left: 50%;
		transform: translateX(-50%);
		width: 100%; *@
		right: 0;
		top: 0px;
		min-width: 100%;
		min-height: 100%;
		z-index: -1;
	}
</style>

<script>
	var leaderboardRankings = [];
	var leaderboardSortingEnabled = false;
	var leaderboardRankingSort = 'asc';

	jQuery(function () {
		getGlobalStats();
		getLeaderboardRankings();
		getRecentActivity();
		getHistogramData();
		
		$('#toggleLeaderboardRankingSort').click(() => {
			if (leaderboardSortingEnabled) {
				leaderboardSortingEnabled = false;

				// Toggle the sort order
				leaderboardRankingSort = leaderboardRankingSort == 'asc' ? 'desc' : 'asc';

				// Update the header arrow
				if (leaderboardRankingSort == 'asc') {
					$('#leaderboardRankingSortArrow').removeClass('fa-arrow-down');
					$('#leaderboardRankingSortArrow').addClass('fa-arrow-up');
				}
				else if (leaderboardRankingSort == 'desc') {
					$('#leaderboardRankingSortArrow').removeClass('fa-arrow-up');
					$('#leaderboardRankingSortArrow').addClass('fa-arrow-down');
				}

				// Sort and render
				handleLeaderboardRankings();
			}
		});

		$('#refreshSteamInfo').click(() => {
			window.location = 'Player/RefreshSteamInfo?steamID=@Model.SteamID';
		});
	});

	function getGlobalStats() {
		$.ajax({
			url: '/Player/GetGlobalStats',
			method: 'GET',
			data: {
				steamID: '@Model.SteamID'
			},
			success: function (data) {
				$('#globalRankPlaceholder').hide();
				$('#globalRank').show();
				$('#globalRank').html(data.globalLeaderboardEntry.rank);

				$('#globalPointsPlaceholder').hide();
				$('#globalPoints').show();
				$('#globalPoints').html(data.globalLeaderboardEntry.noodlePoints);

				$('#globalRatingPlaceholder').hide();
				$('#globalRating').show();
				$('#globalRating').html(data.globalLeaderboardEntry.playerRating);

				$('#globalRankImprovement').html(data.lastWeeksRankImprovement);
				$('#globalPointsImprovement').html(data.lastWeeksPointsImprovement);
				$('#globalRatingImprovement').html(data.lastWeeksRatingImprovement);

				$('#tracksCompletedPlaceholder').hide();
				$('#tracksCompleted').show();
				$('#tracksCompleted').html(data.funStats.tracksCompleted);

				$('#totalImprovementsPlaceholder').hide();
				$('#totalImprovements').show();
				$('#totalImprovements').html(data.funStats.totalImprovements);

				$('#firstSeenPlaceholder').hide();
				$('#firstSeen').show();
				$('#firstSeen').html(data.funStats.firstSeen);

				$('#mostImprovementsPlaceholder').hide();
				$('#mostImprovements').show();
				$('#mostImprovements').html(`${data.funStats.mostImprovements} on ${data.funStats.mostImprovementsLevel}`);
			},
			error: function () {
				toastr.error('Failed to load global stats for this player');
			}
		});
	};

	function getLeaderboardRankings() {
		$.ajax({
			url: '/Player/GetLeaderboardRankings',
			method: 'GET',
			data: {
				steamID: '@Model.SteamID'
			},
			success: function (data) {
				$('#leaderboardRankingsPlaceholder').hide();
				leaderboardRankings = data;
				handleLeaderboardRankings();
			},
			error: function () {
				toastr.error('Failed to load global stats for this player');
			}
		});
	};

	async function handleLeaderboardRankings() {
		// Sort the leaderboard entries
		if (leaderboardRankingSort == 'asc') {
			leaderboardRankings.sort((entry1, entry2) => {
				return entry1.rank - entry2.rank;
			});
		}
		else if (leaderboardRankingSort == 'desc') {
			leaderboardRankings.sort((entry1, entry2) => {
				return entry2.rank - entry1.rank;
			});
		}

		// Fill in the leaderboard rankings table
		var leaderboardRankingsTable = $('#leaderboardRankingsTable');
		leaderboardRankingsTable.html('');
		for (var i = 0; i < leaderboardRankings.length; i++) {
			var rankedEntry = leaderboardRankings[i];
			var row = $(`
			<tr>
				<td class="text-left entry-img no-wrap"><div class="fade-in">
					<img class="card-img-top" src="${rankedEntry.leaderboard.imageURL}">
				</div></td>
				<td class="text-left"><div class="fade-in">
					<a class="link" href="/Leaderboard/Level?leaderboardID=${rankedEntry.leaderboard.id}">
						${rankedEntry.leaderboard.levelName}
					</a>
				</div></td>
				<td><div class="fade-in">${rankedEntry.rank}</div></td>
				<td><div class="fade-in">${rankedEntry.noodlePointsString}</div></td>
				<td><div class="fade-in">${rankedEntry.playerRatingString}</div></td>
			</tr>
			`);
			leaderboardRankingsTable.append(row);
			if(i < 500) {
				await new Promise(r => setTimeout(r, 15));
			}
		}

		leaderboardSortingEnabled = true;
	};

	function getRecentActivity() {
		$.ajax({
			url: '/Player/GetRecentActivity',
			method: 'GET',
			data: {
				steamID: '@Model.SteamID'
			},
			success: async function (data) {
				$('#recentActivityPlaceholder').hide();
				var recentActivity = $('#recentActivity');
				for (var i = 0; i < data.length; i++) {
					var activity = data[i];
					if (activity.sighting != null) {
						var row = $(`
							<tr>
								<td class="text-left entry-img no-wrap"><div class="fade-in">
									<img class="card-img-top" src="${activity.sighting.leaderboard.imageURL}">
								</div></td>
								<td class="text-left"><div class="fade-in">
									<a class="link" href="/Leaderboard/Level?leaderboardID=${activity.sighting.leaderboard.id}">
										${activity.sighting.leaderboard.levelName}
									</a>
								</div></td>
								<td><div class="fade-in">${/*TODO*/''}</div></td>
								<td><div class="fade-in">${activity.sighting.millisecondsString} <span class="text-success">New!</span></div></td>
								<td><div class="fade-in">${activity.timeAgoString}</div></td>
							</tr>
						`);
					}
					else {
						var row = $(`
							<tr>
								<td class="text-left entry-img no-wrap"><div class="fade-in">
									<img class="card-img-top" src="${activity.improvement.leaderboard.imageURL}">
								</div></td>
								<td class="text-left"><div class="fade-in">
									<a class="link" href="/Leaderboard/Level?leaderboardID=${activity.improvement.leaderboard.id}">
										${activity.improvement.leaderboard.levelName}
									</a>
								</div></td>
								<td><div class="fade-in">
									${activity.improvement.newRank}
									( <i class="fas fa-arrow-up fa-sm text-success"></i> ${activity.improvement.oldRank - activity.improvement.newRank} )</div></td>
								<td><div class="fade-in">
									${activity.improvement.millisecondsString}
									( <i class="fas fa-arrow-up fa-sm text-success"></i> ${activity.improvement.timeImprovement} )</div></td>
								<td><div class="fade-in">${activity.timeAgoString}</div></td>
							</tr>
						`);
					}
					recentActivity.append(row);
					await new Promise(r => setTimeout(r, 15));
				}
			},
			error: function () {
				toastr.error('Failed to load recent activity for this player');
			}
		});
	};

	function getHistogramData() {
		$.ajax({
			url: '/Player/GetHistogramData',
			method: 'GET',
			data: {
				steamID: '@Model.SteamID'
			},
			success: async function (data) {
				$('#histogramsPlaceholder').hide();
				console.log(data);
				var histograms = $('#histograms');
				for (const [levelGroup, levelGroupHistogramData] of Object.entries(data)) {
					for (var i = 0; i < levelGroupHistogramData.length; i++) {
						// Set up the HTML for each level's histogram card
						const levelHistogramData = levelGroupHistogramData[i];
						const histogram = $(`
							<div class="col-4 level-card fade-in">
									<div class="card box-shadow" style="margin: 15px 0px 15px 0px;">
										<div class="card-img-top">
											<canvas id="histogram-${levelHistogramData.leaderboard.leaderboardName}"></canvas>
										</div>
										<div class="card-body">
											<a class="link" href="/Leaderboard/Level?leaderboardid=${levelHistogramData.leaderboard.id}">
												<h5 class="card-title">${levelHistogramData.leaderboard.levelName}</h5>
											</a>
											<h6 class="card-subtitle mb-2">${timeFromMs(levelHistogramData.milliseconds)}</h6>
											<h6 class="card-subtitle mb-2">Top ${levelHistogramData.percentile.toFixed(2)}%</h6>
										</div>
									</div>
							</div>
						`);

						histograms.append(histogram);
						if ((i + 1) % 4 == 0 && i > 0) {
							await new Promise(r => setTimeout(r, 100));
						}


						const backgroundColors = [];
						var bucketFound = false;
						var verticalAnnotationBucketKey = '';
						for (var keyIndex = 0; keyIndex < levelHistogramData.bucketKeys.length; keyIndex++) {
							if (!bucketFound && parseInt(levelHistogramData.milliseconds) < parseInt(levelHistogramData.bucketKeys[keyIndex])) {
								bucketFound = true;
								if (keyIndex > 0) {
									backgroundColors.pop();
									verticalAnnotationBucketKey = levelHistogramData.bucketKeys[keyIndex - 1];
								}
								else {
									verticalAnnotationBucketKey = levelHistogramData.bucketKeys[keyIndex];
								}
								backgroundColors.push('red');
								if (keyIndex > 0) {
									backgroundColors.push('green');
								}
							}
							else {
								backgroundColors.push('green');
							}
						}

						// Create the chart for each level
						const ctx = document.getElementById(`histogram-${levelHistogramData.leaderboard.leaderboardName}`).getContext('2d');
						const defaultImage = new Image();
						const image = new Image();
						image.src = `${levelHistogramData.leaderboard.imageURL}`;
						
						const imageToUse = image.height != 0 ? image : defaultImage;  // Use a blank image if the image can't be found

						const histogramChart = new Chart(ctx, {
							type: 'bar',
							data: {
								labels: levelHistogramData.bucketKeys.map(x => timeFromMs(x)),
								datasets: [{
									label: 'Count',
									data: levelHistogramData.bucketCounts,
									backgroundColor: backgroundColors,
								}]
							},
							options: {
								plugins: {
									legend: {
										display: false
									},
									annotation: {
										annotations: [
											{
												type: 'line',
												scaleID: 'x',
												borderWidth: 1,
												borderColor: '#e74c3c',
												value: timeFromMs(verticalAnnotationBucketKey),
											},
										]
									}
								},
								scales: {
									y: {
										ticks: {
											display: false
										}
									}
								}
							},
							plugins: [
								{
									id: `custom_canvas_background_image_${levelHistogramData.leaderboard.leaderboardName}`,
									beforeDraw: (chart) => {
										if (imageToUse.complete) {
											const ctx = chart.ctx;
											const {top, left, width, height} = chart.chartArea;
											const x = left + width / 2 - imageToUse.width / 2;
											const y = top + height / 2 - imageToUse.height / 2;
											ctx.globalAlpha = 0.15;
											ctx.drawImage(imageToUse, x, y);
											ctx.globalAlpha = 1;
										} else {
											imageToUse.onload = () => chart.draw();
										}
									}
								}
							]
						});
					}
				}
			},
			error: function () {
				toastr.error('Failed to load histogram data for this player');
			}
		});
	};

	function capitalizeProperty(s) {
		return s[0].toUpperCase() + s.slice(1);
	};

</script>

<video autoplay muted loop id="backgroundVideo" poster="@Model.SteamBackground">
	<source src="@Model.SteamBackground" type="video/webm">
</video>

<div class="text-center fade-in container">
	<div class="row">
		<div class="col-xl-3 col-12">
			<div class="fade-in info-card box-shadow rounded-corners">
				<div class="row">
					<div class="col-4 col-xl-12">
						<a href="http://steamcommunity.com/profiles/@Model.SteamID" target="_blank">
							<img href="" src="@await Model.GetSteamAvatar(steamDAL, playerDAL, "_full")" />
						</a>
						<h2 style="text-overflow: ellipsis; overflow: hidden">@Model.Name <i title="Refresh Steam Profile Info" class="fas fa-sync fa-xxs pointer" id="refreshSteamInfo"></i></h2>
					</div>
				</div>
			</div>
			<hr />
			<div class="fade-in info-card box-shadow rounded-corners">
				<div class="row">
					<div class="col-lg-12 col-xl-6">
						<h5>Global Rank</h5>
						<div id="globalRankPlaceholder" class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
						<h4 id="globalRank" class="odometer" style="display: none; margin-bottom: 1px; margin-top: -6px;"></h4>
						<h6>Last 7d: <i class="fas fa-arrow-up fa-sm text-success"></i> <span id="globalRankImprovement" class="odometer" style="margin-top: -2px;">0</span></h6>
					</div>
					<div class="col-lg-12 col-xl-6">
						<h5>Rating</h5>
						<div id="globalRatingPlaceholder" class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
						<h4 id="globalRating" class="odometer" style="display: none; margin-bottom: 1px; margin-top: -6px;"></h4>
						<h6>Last 7d: <i class="fas fa-arrow-up fa-sm text-success"></i> <span id="globalRatingImprovement" class="odometer" style="margin-top: -2px;">0</span></h6>
					</div>
					<div class="col-lg-12 col-xl-12">
						<h5>Points</h5>
						<div id="globalPointsPlaceholder" class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
						<h4 id="globalPoints" class="odometer" style="display: none; margin-bottom: 1px; margin-top: -6px;"></h4>
						<h6>Last 7d: <i class="fas fa-arrow-up fa-sm text-success"></i> <span id="globalPointsImprovement" class="odometer" style="margin-top: -2px;">0</span></h6>
					</div>
				</div>
			</div>
			<hr />
			<div class="fade-in info-card box-shadow rounded-corners">
				<div class="row text-left">
					<div class="col-8">
						<h6>Tracks Completed:</h6>
					</div>
					<div class="col-4">
						<h6 class="text-right">
							<span id="tracksCompleted" class="odometer" style="display: none;"></span>
							<span id="tracksCompletedPlaceholder">-</span>
						</h6>
					</div>
					<div class="col-8">
						<h6>Total Improvements:</h6>
					</div>
					<div class="col-4">
						<h6 class="text-right">
							<span id="totalImprovements"></span>
							<span id="totalImprovementsPlaceholder">-</span>
						</h6>
					</div>
					<div class="col-6">
						<h6>First Seen:</h6>
					</div>
					<div class="col-6">
						<h6 class="text-right">
							<span id="firstSeen"></span>
							<span id="firstSeenPlaceholder">-</span>
						</h6>
					</div>
					@*<div class="col-6">
						<h6>Most Improvements:</h6>
					</div>
					<div class="col-6">
						<h6 class="text-right">
							<span id="mostImprovements"></span>
							<span id="mostImprovementsPlaceholder">-</span>
						</h6>
					</div>*@
				</div>
			</div>
			
		</div>
		<div class="col-xl-9 col-12">
			<ul class="nav nav-dark nav-pills mb-3" id="pills-tab" role="tablist">
				<li class="nav-item" role="presentation">
					<a class="nav-link active" id="pills-recent-activity-tab" data-toggle="pill" href="#pills-recent-activity" role="tab" aria-controls="pills-recent-activity" aria-selected="true">Recent Activity</a>
				</li>
				<li class="nav-item" role="presentation">
					<a class="nav-link" id="pills-rankings-tab" data-toggle="pill" href="#pills-rankings" role="tab" aria-controls="pills-rankings" aria-selected="false">Track Rankings</a>
				</li>
				<li class="nav-item" role="presentation">
					<a class="nav-link" id="pills-histograms-tab" data-toggle="pill" href="#pills-histograms" role="tab" aria-controls="pills-histograms" aria-selected="false">Global Comparisons</a>
				</li>
			</ul>
			<div class="tab-content" id="pills-tabContent">
				<div class="tab-pane fade show active" id="pills-recent-activity" role="tabpanel" aria-labelledby="pills-recent-activity-tab">
					<table class="table table-striped table-dark box-shadow rounded-corners">
						<thead>
							<tr>
								<th class="text-left" style="width: 100px">Track</th>
								<th></th>
								<th>Rank</th>
								<th>Time</th>
								<th>When</th>
							</tr>
						</thead>
						<tbody id="recentActivity">
						</tbody>
					</table>
					<div id="recentActivityPlaceholder" class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
				</div>
				<div class="tab-pane fade" id="pills-rankings" role="tabpanel" aria-labelledby="pills-rankings-tab">
					<table class="table table-striped table-dark box-shadow rounded-corners" style="table-layout: fixed">
						<thead>
							<tr>
								<th class="text-left" style="width: 100px">Track</th>
								<th></th>
								<th style="width: 100px">
									<span id="toggleLeaderboardRankingSort" class="pointer">Rank</span>&nbsp;
									<i id="leaderboardRankingSortArrow" class="fas fa-arrow-up fa-sm"></i></th>
								<th style="width: 100px">Points</th>
								<th style="width: 100px">Rating</th>
							</tr>
						</thead>
						<tbody id="leaderboardRankingsTable">
						</tbody>
					</table>
					<div id="leaderboardRankingsPlaceholder" class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
				</div>
				<div class="tab-pane fade" id="pills-histograms" role="tabpanel" aria-labelledby="pills-histograms-tab">
					<div class="row" id="histograms"></div>
					<div id="histogramsPlaceholder" class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
				</div>
			</div>
		</div>
	</div>

</div>
